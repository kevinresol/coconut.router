// Generated by Haxe 4.1.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Demo = function() { };
Demo.__name__ = true;
Demo.main = function() {
	coconut_react_Renderer.mountInto(window.document.getElementById("app"),App.fromHxx({ }));
};
var Route = $hxEnums["Route"] = { __ename__ : true, __constructs__ : ["Home","Settings"]
	,Home: {_hx_index:0,__enum__:"Route",toString:$estr}
	,Settings: ($_=function(id) { return {_hx_index:1,id:id,__enum__:"Route",toString:$estr}; },$_.__params__ = ["id"],$_)
};
var RouteTools = function() { };
RouteTools.__name__ = true;
RouteTools.locationToRoute = function(url) {
	var _g = tink_url_PortionArray.toStringArray(tink_url_Path.parts(url.path));
	if(_g.length == 2) {
		var _g1 = _g[0];
		if(_g1 == null) {
			return Route.Home;
		} else if(_g1 == "settings") {
			var id = _g[1];
			return Route.Settings(id);
		} else {
			return Route.Home;
		}
	} else {
		return Route.Home;
	}
};
RouteTools.routeToLocation = function(route) {
	switch(route._hx_index) {
	case 0:
		return tink_Url.fromString("/");
	case 1:
		var id = route.id;
		return tink_Url.fromString("/settings/" + id);
	}
};
var coconut_react_ViewBase = function(rendered,mounted,updated,unmounting) {
	React.Component.call(this);
	this.state = this.__snap();
	this.__rendered = rendered;
	this.__viewMounted = mounted;
	this.__viewUpdated = updated;
	this.__viewUnmounting = unmounting;
};
coconut_react_ViewBase.__name__ = true;
coconut_react_ViewBase.__super__ = React.Component;
coconut_react_ViewBase.prototype = $extend(React.Component.prototype,{
	__snap: function() {
		var _gthis = this;
		return { vtree : new tink_core__$Lazy_LazyFunc(function() {
			return tink_state_Observable.get_value(_gthis.__rendered);
		})};
	}
	,componentDidMount: function() {
		var _gthis = this;
		this.__link = tink_state_Observable.bind(this.__rendered,null,function(_) {
			_gthis.setState(_gthis.__snap());
		});
		if(this.__viewMounted != null) {
			this.__viewMounted();
		}
	}
	,componentDidUpdate: function(_,_1) {
		if(this.__viewUpdated != null) {
			this.__viewUpdated();
		}
	}
	,componentWillUnmount: function() {
		var this1 = this.__link;
		if(this1 != null) {
			this1.cancel();
		}
		if(this.__viewUnmounting != null) {
			this.__viewUnmounting();
		}
	}
	,reactify: function() {
		if(this.__rewrapped == null) {
			this.__rewrapped = React.createElement(coconut_react__$View_Rewrapped,{ target : this});
		}
		return this.__rewrapped;
	}
	,shouldComponentUpdate: function(_,next) {
		return this.state.vtree.get() != next.vtree.get();
	}
	,render: function() {
		var ret = this.state.vtree.get();
		if(typeof(ret) == "undefined") {
			return null;
		}
		return ret;
	}
	,__class__: coconut_react_ViewBase
});
var coconut_react_View = function(render,shouldUpdate,track,beforeRerender,rendered) {
	this.__au = [];
	this.__bc = [];
	this.__bu = [];
	this._coco_revision = new tink_state__$State_SimpleState(0,null,null);
	this.viewId = coconut_react_View.idCounter++;
	var _gthis = this;
	var mounted;
	if(rendered != null) {
		var _g = rendered;
		var a1 = true;
		mounted = function() {
			_g(a1);
		};
	} else {
		mounted = null;
	}
	var updated;
	if(rendered != null) {
		var _g1 = rendered;
		var a11 = false;
		updated = function() {
			_g1(a11);
		};
	} else {
		updated = null;
	}
	var firstTime = true;
	var last = null;
	var hasBeforeRerender = beforeRerender != null;
	var hasUpdated = updated != null;
	var lastRev = tink_state_State.get_value(this._coco_revision);
	var renderView = function() {
		var curRev = tink_state_State.get_value(_gthis._coco_revision);
		if(track != null) {
			track();
		}
		if(firstTime) {
			firstTime = false;
		} else {
			if(curRev == lastRev && shouldUpdate != null && !shouldUpdate()) {
				return last;
			}
			var hasCallbacks = _gthis.__bc.length > 0;
			if(hasBeforeRerender || hasCallbacks) {
				var before = tink_state__$Observable_AutoObservable.cur;
				tink_state__$Observable_AutoObservable.cur = null;
				if(hasBeforeRerender) {
					beforeRerender();
				}
				if(hasCallbacks) {
					var _g = 0;
					var _g1 = _gthis.__bc.splice(0,_gthis.__bc.length);
					while(_g < _g1.length) {
						var c = _g1[_g];
						++_g;
						tink_core_Callback.invoke(c,false);
					}
				}
				var ret = null;
				tink_state__$Observable_AutoObservable.cur = before;
			}
		}
		lastRev = curRev;
		last = render();
		return last;
	};
	coconut_react_ViewBase.call(this,tink_state_Observable.auto(tink_state__$Observable_Computation.sync(renderView)),mounted,function() {
		var hasCallbacks = _gthis.__au.length > 0;
		if(hasUpdated || hasCallbacks) {
			var before = tink_state__$Observable_AutoObservable.cur;
			tink_state__$Observable_AutoObservable.cur = null;
			if(hasUpdated) {
				updated();
			}
			if(hasCallbacks) {
				var _g = 0;
				var _g1 = _gthis.__au.splice(0,_gthis.__au.length);
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					tink_core_Callback.invoke(c,tink_core_Noise.Noise);
				}
			}
			var ret = null;
			tink_state__$Observable_AutoObservable.cur = before;
		}
	},function() {
		last = null;
		firstTime = true;
		_gthis.__beforeUnmount();
	});
};
coconut_react_View.__name__ = true;
coconut_react_View.createFragment = function(attr,children) {
	var tmp = [React.Fragment,attr].concat(children);
	return React.createElement.apply(null,tmp);
};
coconut_react_View.__super__ = coconut_react_ViewBase;
coconut_react_View.prototype = $extend(coconut_react_ViewBase.prototype,{
	__beforeUnmount: function() {
		var _g = 0;
		var _g1 = this.__bu.splice(0,this.__bu.length);
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c != null) {
				c.cancel();
			}
		}
		var _g = 0;
		var _g1 = this.__bc.splice(0,this.__bu.length);
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			tink_core_Callback.invoke(c,true);
		}
	}
	,forceUpdate: function(callback) {
		this._coco_revision.set(tink_state_State.get_value(this._coco_revision) + 1);
		if(callback != null) {
			this.__au.push(tink_core_Callback.fromNiladic(callback));
		}
	}
	,__class__: coconut_react_View
});
var App = function(__coco_data_) {
	this.__initAttributes(__coco_data_);
	var snapshot = null;
	coconut_react_View.call(this,$bind(this,this.coconutRender),null,null,null,null);
};
App.__name__ = true;
App.fromHxx = function(attributes) {
	return React.createElement(App,attributes);
};
App.__super__ = coconut_react_View;
App.prototype = $extend(coconut_react_View.prototype,{
	coconutRender: function() {
		var _gthis = this;
		var __o0 = RouteTools;
		return coconut_router_Router.fromHxx({ renderScreen : tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
			return $bind(_gthis,_gthis.renderScreen);
		})), routeToLocation : tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
			return __o0.routeToLocation;
		})), locationToRoute : tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
			return __o0.locationToRoute;
		}))});
	}
	,renderScreen: function(route) {
		var tmp;
		switch(route._hx_index) {
		case 0:
			tmp = HomeView.fromHxx({ });
			break;
		case 1:
			var id = route.id;
			tmp = SettingsView.fromHxx({ id : tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
				return id;
			}))});
			break;
		}
		return coconut_react_View.createFragment({ },[tmp]);
	}
	,getOptions: function(route) {
		switch(route._hx_index) {
		case 0:
			return { headerTitle : "Home"};
		case 1:
			var _g = route.id;
			return { headerTitle : "Settings"};
		}
	}
	,__initAttributes: function(attributes) {
	}
	,__class__: App
});
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var tink_state_Scheduler = function() { };
tink_state_Scheduler.__name__ = true;
tink_state_Scheduler.prototype = {
	__class__: tink_state_Scheduler
};
var tink_state__$Observable_BatchScheduler = function(run) {
	this.scheduled = false;
	this.queue = [];
	this.run = run;
};
tink_state__$Observable_BatchScheduler.__name__ = true;
tink_state__$Observable_BatchScheduler.__interfaces__ = [tink_state_Scheduler];
tink_state__$Observable_BatchScheduler.prototype = {
	measure: function() {
		return HxOverrides.now() / 1000;
	}
	,progress: function(maxSeconds) {
		var _gthis = this;
		var wasUpdating = tink_state_Observable.isUpdating;
		tink_state_Observable.isUpdating = true;
		return tink_core_TypedError.tryFinally(function() {
			var end = HxOverrides.now() / 1000 + maxSeconds;
			while(true) {
				var old = _gthis.queue;
				_gthis.queue = [];
				var _g = 0;
				while(_g < old.length) {
					var o = old[_g];
					++_g;
					o.run();
				}
				if(!(_gthis.queue.length > 0 && HxOverrides.now() / 1000 < end)) {
					break;
				}
			}
			if(_gthis.queue.length > 0) {
				_gthis.run(_gthis,true);
				return true;
			} else {
				return _gthis.scheduled = false;
			}
		},function() {
			tink_state_Observable.isUpdating = wasUpdating;
		});
	}
	,schedule: function(s) {
		this.queue.push(s);
		if(!this.scheduled) {
			this.scheduled = true;
			this.run(this,false);
		}
	}
	,__class__: tink_state__$Observable_BatchScheduler
};
var tink_state_Observable = {};
tink_state_Observable.get_value = function(this1) {
	var ret = this1.getValue();
	if(tink_state__$Observable_AutoObservable.cur != null) {
		tink_state__$Observable_AutoObservable.cur.subscribeTo(this1,ret);
	}
	return ret;
};
tink_state_Observable.untracked = function(fn) {
	var before = tink_state__$Observable_AutoObservable.cur;
	tink_state__$Observable_AutoObservable.cur = null;
	var ret = fn();
	tink_state__$Observable_AutoObservable.cur = before;
	return ret;
};
tink_state_Observable.bind = function(this1,options,cb) {
	var this2 = new tink_core_SimpleLink(($_=new tink_state__$Observable_Binding(this1,cb,options != null && options.direct ? null : tink_state_Observable.scheduler,options == null ? null : options.comparator),$bind($_,$_.cancel)));
	return this2;
};
tink_state_Observable._new = function(get,changed) {
	var this1 = tink_state_Observable.create(function() {
		var this1 = new tink_core_MPair(get(),tink_core_Signal.nextTime(changed));
		var this2 = this1;
		return this2;
	});
	return this1;
};
tink_state_Observable.combine = function(this1,that,f) {
	return tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
		return f(tink_state_Observable.get_value(this1),tink_state_Observable.get_value(that));
	}));
};
tink_state_Observable.nextTime = function(this1,options,check) {
	return tink_state_Observable.getNext(this1,options,function(v) {
		if(check(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_state_Observable.getNext = function(this1,options,select) {
	var ret = new tink_core_FutureTrigger();
	var waiting = options != null && options.butNotNow;
	var link = tink_state_Observable.bind(this1,{ direct : options != null && options.hires},function(value) {
		var out = select(value);
		if(waiting) {
			waiting = out != haxe_ds_Option.None;
		} else {
			switch(out._hx_index) {
			case 0:
				var value = out.v;
				ret.trigger(value);
				break;
			case 1:
				break;
			}
		}
	});
	var _e = link;
	var tmp = function() {
		if(_e != null) {
			_e.cancel();
		}
	};
	ret.handle(tink_core_Callback.fromNiladic(tmp));
	return ret;
};
tink_state_Observable.join = function(this1,that) {
	var lastA = null;
	return tink_state_Observable.combine(this1,that,function(a,b) {
		var ret = lastA == a ? b : a;
		lastA = a;
		return ret;
	});
};
tink_state_Observable.map = function(this1,f) {
	return new tink_state__$Observable_TransformObservable(this1,f);
};
tink_state_Observable.combineAsync = function(this1,that,f) {
	return tink_state_Observable.auto(tink_state__$Observable_Computation.async(function() {
		return f(tink_state_Observable.get_value(this1),tink_state_Observable.get_value(that));
	}));
};
tink_state_Observable.mapAsync = function(this1,f) {
	return tink_state_Observable.auto(tink_state__$Observable_Computation.async(function() {
		var value = this1.getValue();
		return f(value);
	}));
};
tink_state_Observable.switchSync = function(this1,cases,dfault) {
	return tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
		var v = tink_state_Observable.get_value(this1);
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			if(c.when(v)) {
				dfault = c.then;
				break;
			}
		}
		return tink_state_Observable.get_value(dfault.get());
	}));
};
tink_state_Observable.schedule = function(f) {
	tink_state_Observable.scheduler.schedule(tink_state__$Observable_JustOnce.call(f));
};
tink_state_Observable.updatePending = function(maxSeconds) {
	if(maxSeconds == null) {
		maxSeconds = .01;
	}
	if(!tink_state_Observable.isUpdating) {
		return tink_state_Observable.scheduler.progress(maxSeconds);
	} else {
		return false;
	}
};
tink_state_Observable.updateAll = function() {
	tink_state_Observable.updatePending(Infinity);
};
tink_state_Observable.lift = function(o) {
	return o;
};
tink_state_Observable.ofPromise = function(p) {
	return tink_state_Observable.auto(tink_state__$Observable_Computation.async(function() {
		return p;
	}));
};
tink_state_Observable.create = function(f,comparator) {
	return new tink_state__$Observable_SimpleObservable(f,comparator);
};
tink_state_Observable.auto = function(f,comparator) {
	return new tink_state__$Observable_AutoObservable(f,comparator);
};
tink_state_Observable.const = function(value) {
	return new tink_state__$Observable_ConstObservable(value);
};
tink_state_Observable.eq = function(a,b) {
	if(a == null) {
		if(b == null) {
			return true;
		} else {
			return false;
		}
	} else if(b == null) {
		return false;
	} else {
		return tink_state_Observable.get_value(a) == tink_state_Observable.get_value(b);
	}
};
tink_state_Observable.neq = function(a,b) {
	return !tink_state_Observable.eq(a,b);
};
var tink_state_ObservableObject = function() { };
tink_state_ObservableObject.__name__ = true;
tink_state_ObservableObject.prototype = {
	__class__: tink_state_ObservableObject
};
var tink_state__$Observable_ConstObservable = function(value) {
	this.value = value;
};
tink_state__$Observable_ConstObservable.__name__ = true;
tink_state__$Observable_ConstObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state__$Observable_ConstObservable.prototype = {
	getValue: function() {
		return this.value;
	}
	,isValid: function() {
		return true;
	}
	,getComparator: function() {
		return null;
	}
	,onInvalidate: function(i) {
		return null;
	}
	,__class__: tink_state__$Observable_ConstObservable
};
var coconut_ui_internal_ImplicitValues = {};
coconut_ui_internal_ImplicitValues._new = function(a) {
	var _g = new haxe_ds_ObjectMap();
	var _g1 = 0;
	while(_g1 < a.length) {
		var o = a[_g1];
		++_g1;
		_g.set(o.key,o.val);
	}
	var this1 = _g;
	return this1;
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var coconut_ui_internal_ImplicitContext = function(parent) {
	this.slots = new haxe_ds_ObjectMap();
	var tmp;
	if(parent == null) {
		tmp = coconut_ui_internal_ImplicitContext.ORPHAN;
	} else {
		var v = parent;
		tmp = v;
	}
	this.parent = tmp;
};
coconut_ui_internal_ImplicitContext.__name__ = true;
coconut_ui_internal_ImplicitContext.prototype = {
	get: function(key) {
		var _g = this.parent.get();
		var _g1 = tink_state_Observable.get_value(this.getSlot(key));
		if(_g1 == null) {
			if(_g == null) {
				return null;
			} else {
				var p = _g;
				return p.get(key);
			}
		} else {
			var v = _g1;
			return v;
		}
	}
	,getSlot: function(key) {
		var _g = this.slots.h[key.__id__];
		if(_g == null) {
			var this1 = this.slots;
			var v = new coconut_ui_internal_Slot(this);
			this1.set(key,v);
			return v;
		} else {
			var v = _g;
			return v;
		}
	}
	,update: function(values) {
		var _g = new haxe_iterators_MapKeyValueIterator(this.slots);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var k = _g1.key;
			var slot = _g1.value;
			if(values.h.__keys__[k.__id__] == null) {
				slot.setData(null);
			}
		}
		var _g = new haxe_iterators_MapKeyValueIterator(values);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var k = _g1.key;
			var v = _g1.value;
			this.getSlot(k).setData(v);
		}
	}
	,__class__: coconut_ui_internal_ImplicitContext
};
var coconut_react_Implicit = function() {
	var _gthis = this;
	React.Component.call(this);
	this.__coco_context = new coconut_ui_internal_ImplicitContext(new tink_core__$Lazy_LazyFunc(function() {
		return _gthis.context;
	}));
};
coconut_react_Implicit.__name__ = true;
coconut_react_Implicit.fromHxx = function(attr) {
	return React.createElement(coconut_react_Implicit,attr);
};
coconut_react_Implicit.__super__ = React.Component;
coconut_react_Implicit.prototype = $extend(React.Component.prototype,{
	render: function() {
		this.__coco_context.update(this.props.defaults);
		return React.createElement(react_ReactType.fromString(coconut_react_Implicit.contextType.Provider),{ value : this.__coco_context},coconut_react_View.createFragment({ },this.props.children));
	}
	,__class__: coconut_react_Implicit
});
var HomeView = function(__coco_data_) {
	var _gthis = this;
	var fallback = new tink_core__$Lazy_LazyFunc(function() {
		return null;
	});
	this.__coco_history = new coconut_ui_internal_Slot(this,null,tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
		var _g = _gthis.context.get(coconut_ui_internal_TypeKey.ofClass(coconut_router_History));
		if(_g == null) {
			return fallback.get();
		} else {
			var v = _g;
			return v;
		}
	})));
	this.__initAttributes(__coco_data_);
	var snapshot = null;
	coconut_react_View.call(this,$bind(this,this.coconutRender),null,null,null,null);
};
HomeView.__name__ = true;
HomeView.fromHxx = function(attributes) {
	return React.createElement(HomeView,attributes);
};
HomeView.__super__ = coconut_react_View;
HomeView.prototype = $extend(coconut_react_View.prototype,{
	coconutRender: function() {
		var _gthis = this;
		var __r = [];
		__r.push(coconut_react_Html.h("div",{ },["Home"]));
		__r.push(coconut_react_Html.h("button",{ onClick : tink_core_Callback.fromNiladic(function() {
			tink_state_Observable.get_value(_gthis.__coco_history).push(Route.Settings("foo"));
		})},["Settings"]));
		return coconut_react_Html.h("div",{ },__r);
	}
	,get_history: function() {
		return tink_state_Observable.get_value(this.__coco_history);
	}
	,__initAttributes: function(attributes) {
		this.__coco_history.setData(attributes.history);
	}
	,__class__: HomeView
});
var SettingsView = function(__coco_data_) {
	var _gthis = this;
	this.__coco_id = new coconut_ui_internal_Slot(this,null,null);
	var fallback = new tink_core__$Lazy_LazyFunc(function() {
		return null;
	});
	this.__coco_history = new coconut_ui_internal_Slot(this,null,tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
		var _g = _gthis.context.get(coconut_ui_internal_TypeKey.ofClass(coconut_router_History));
		if(_g == null) {
			return fallback.get();
		} else {
			var v = _g;
			return v;
		}
	})));
	this.__initAttributes(__coco_data_);
	var snapshot = null;
	coconut_react_View.call(this,$bind(this,this.coconutRender),null,null,null,null);
};
SettingsView.__name__ = true;
SettingsView.fromHxx = function(attributes) {
	return React.createElement(SettingsView,attributes);
};
SettingsView.__super__ = coconut_react_View;
SettingsView.prototype = $extend(coconut_react_View.prototype,{
	coconutRender: function() {
		var __r = [];
		__r.push("Settings: ");
		__r.push(tink_state_Observable.get_value(this.__coco_id));
		return coconut_react_Html.h("div",{ },__r);
	}
	,get_id: function() {
		return tink_state_Observable.get_value(this.__coco_id);
	}
	,get_history: function() {
		return tink_state_Observable.get_value(this.__coco_history);
	}
	,__initAttributes: function(attributes) {
		this.__coco_id.setData(attributes.id);
		this.__coco_history.setData(attributes.history);
	}
	,__class__: SettingsView
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var JsxStaticInit_$_$ = function() { };
JsxStaticInit_$_$.__name__ = true;
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var coconut_data_Value = {};
coconut_data_Value.getValue = function(this1) {
	return tink_state_Observable.get_value(this1);
};
coconut_data_Value.or = function(this1,fallback) {
	if(this1 == null) {
		return fallback;
	} else {
		return this1;
	}
};
var coconut_react_ReactEvent = {};
coconut_react_ReactEvent.stopImmediatePropagation = function(this1) {
	this1.stopPropagation();
};
var coconut_react_CustomAttr = {};
coconut_react_CustomAttr.ofBool = function(b) {
	if(b != true) {
		return undefined;
	} else {
		return "";
	}
};
var coconut_react_Html = function() { };
coconut_react_Html.__name__ = true;
coconut_react_Html.raw = function(attr) {
	var _g = attr.tag;
	var tmp;
	if(_g == null) {
		tmp = "span";
	} else {
		var v = _g;
		tmp = v;
	}
	return coconut_react_Html.h(tmp,{ className : attr.className, dangerouslySetInnerHTML : { __html : attr.content}});
};
coconut_react_Html.h = function(tag,attr,children) {
	if(children == null) {
		return React.createElement(react_ReactType.fromString(tag),attr);
	} else {
		var tmp = [tag,attr].concat(children);
		return React.createElement.apply(null,tmp);
	}
};
coconut_react_Html.wbr = function(attributes) {
	return coconut_react_Html.h("wbr",attributes);
};
coconut_react_Html.video = function(attributes,children) {
	return coconut_react_Html.h("video",attributes,children);
};
coconut_react_Html.ul = function(attributes,children) {
	return coconut_react_Html.h("ul",attributes,children);
};
coconut_react_Html.track = function(attributes) {
	return coconut_react_Html.h("track",attributes);
};
coconut_react_Html.tr = function(attributes,children) {
	return coconut_react_Html.h("tr",attributes,children);
};
coconut_react_Html.title = function(attributes,children) {
	return coconut_react_Html.h("title",attributes,children);
};
coconut_react_Html.thead = function(attributes,children) {
	return coconut_react_Html.h("thead",attributes,children);
};
coconut_react_Html.th = function(attributes,children) {
	return coconut_react_Html.h("th",attributes,children);
};
coconut_react_Html.tfoot = function(attributes,children) {
	return coconut_react_Html.h("tfoot",attributes,children);
};
coconut_react_Html.textarea = function(attributes,children) {
	return coconut_react_Html.h("textarea",attributes,children);
};
coconut_react_Html.td = function(attributes,children) {
	return coconut_react_Html.h("td",attributes,children);
};
coconut_react_Html.tbody = function(attributes,children) {
	return coconut_react_Html.h("tbody",attributes,children);
};
coconut_react_Html.table = function(attributes,children) {
	return coconut_react_Html.h("table",attributes,children);
};
coconut_react_Html.svg = function(attributes,children) {
	return coconut_react_Html.h("svg",attributes,children);
};
coconut_react_Html.summary = function(attributes,children) {
	return coconut_react_Html.h("summary",attributes,children);
};
coconut_react_Html.style = function(attributes,children) {
	return coconut_react_Html.h("style",attributes,children);
};
coconut_react_Html.strong = function(attributes,children) {
	return coconut_react_Html.h("strong",attributes,children);
};
coconut_react_Html.span = function(attributes,children) {
	return coconut_react_Html.h("span",attributes,children);
};
coconut_react_Html.source = function(attributes) {
	return coconut_react_Html.h("source",attributes);
};
coconut_react_Html.small = function(attributes,children) {
	return coconut_react_Html.h("small",attributes,children);
};
coconut_react_Html.select = function(attributes,children) {
	return coconut_react_Html.h("select",attributes,children);
};
coconut_react_Html.section = function(attributes,children) {
	return coconut_react_Html.h("section",attributes,children);
};
coconut_react_Html.script = function(attributes,children) {
	return coconut_react_Html.h("script",attributes,children);
};
coconut_react_Html.rect = function(attributes,children) {
	return coconut_react_Html.h("rect",attributes,children);
};
coconut_react_Html.pre = function(attributes,children) {
	return coconut_react_Html.h("pre",attributes,children);
};
coconut_react_Html.polygon = function(attributes,children) {
	return coconut_react_Html.h("polygon",attributes,children);
};
coconut_react_Html.picture = function(attributes,children) {
	return coconut_react_Html.h("picture",attributes,children);
};
coconut_react_Html.path = function(attributes,children) {
	return coconut_react_Html.h("path",attributes,children);
};
coconut_react_Html.param = function(attributes) {
	return coconut_react_Html.h("param",attributes);
};
coconut_react_Html.p = function(attributes,children) {
	return coconut_react_Html.h("p",attributes,children);
};
coconut_react_Html.option = function(attributes,children) {
	return coconut_react_Html.h("option",attributes,children);
};
coconut_react_Html.ol = function(attributes,children) {
	return coconut_react_Html.h("ol",attributes,children);
};
coconut_react_Html.object = function(attributes,children) {
	return coconut_react_Html.h("object",attributes,children);
};
coconut_react_Html.nav = function(attributes,children) {
	return coconut_react_Html.h("nav",attributes,children);
};
coconut_react_Html.meta = function(attributes) {
	return coconut_react_Html.h("meta",attributes);
};
coconut_react_Html.menu = function(attributes,children) {
	return coconut_react_Html.h("menu",attributes,children);
};
coconut_react_Html.main = function(attributes,children) {
	return coconut_react_Html.h("main",attributes,children);
};
coconut_react_Html.link = function(attributes) {
	return coconut_react_Html.h("link",attributes);
};
coconut_react_Html.li = function(attributes,children) {
	return coconut_react_Html.h("li",attributes,children);
};
coconut_react_Html.legend = function(attributes,children) {
	return coconut_react_Html.h("legend",attributes,children);
};
coconut_react_Html.label = function(attributes,children) {
	return coconut_react_Html.h("label",attributes,children);
};
coconut_react_Html.ins = function(attributes,children) {
	return coconut_react_Html.h("ins",attributes,children);
};
coconut_react_Html.input = function(attributes) {
	return coconut_react_Html.h("input",attributes);
};
coconut_react_Html.img = function(attributes) {
	return coconut_react_Html.h("img",attributes);
};
coconut_react_Html.iframe = function(attributes,children) {
	return coconut_react_Html.h("iframe",attributes,children);
};
coconut_react_Html.i = function(attributes,children) {
	return coconut_react_Html.h("i",attributes,children);
};
coconut_react_Html.html = function(attributes,children) {
	return coconut_react_Html.h("html",attributes,children);
};
coconut_react_Html.hr = function(attributes) {
	return coconut_react_Html.h("hr",attributes);
};
coconut_react_Html.header = function(attributes,children) {
	return coconut_react_Html.h("header",attributes,children);
};
coconut_react_Html.head = function(attributes,children) {
	return coconut_react_Html.h("head",attributes,children);
};
coconut_react_Html.h6 = function(attributes,children) {
	return coconut_react_Html.h("h6",attributes,children);
};
coconut_react_Html.h5 = function(attributes,children) {
	return coconut_react_Html.h("h5",attributes,children);
};
coconut_react_Html.h4 = function(attributes,children) {
	return coconut_react_Html.h("h4",attributes,children);
};
coconut_react_Html.h3 = function(attributes,children) {
	return coconut_react_Html.h("h3",attributes,children);
};
coconut_react_Html.h2 = function(attributes,children) {
	return coconut_react_Html.h("h2",attributes,children);
};
coconut_react_Html.h1 = function(attributes,children) {
	return coconut_react_Html.h("h1",attributes,children);
};
coconut_react_Html.form = function(attributes,children) {
	return coconut_react_Html.h("form",attributes,children);
};
coconut_react_Html.footer = function(attributes,children) {
	return coconut_react_Html.h("footer",attributes,children);
};
coconut_react_Html.fieldset = function(attributes,children) {
	return coconut_react_Html.h("fieldset",attributes,children);
};
coconut_react_Html.embed = function(attributes) {
	return coconut_react_Html.h("embed",attributes);
};
coconut_react_Html.em = function(attributes,children) {
	return coconut_react_Html.h("em",attributes,children);
};
coconut_react_Html.ellipse = function(attributes,children) {
	return coconut_react_Html.h("ellipse",attributes,children);
};
coconut_react_Html.dt = function(attributes,children) {
	return coconut_react_Html.h("dt",attributes,children);
};
coconut_react_Html.dl = function(attributes,children) {
	return coconut_react_Html.h("dl",attributes,children);
};
coconut_react_Html.div = function(attributes,children) {
	return coconut_react_Html.h("div",attributes,children);
};
coconut_react_Html.details = function(attributes,children) {
	return coconut_react_Html.h("details",attributes,children);
};
coconut_react_Html.del = function(attributes,children) {
	return coconut_react_Html.h("del",attributes,children);
};
coconut_react_Html.dd = function(attributes,children) {
	return coconut_react_Html.h("dd",attributes,children);
};
coconut_react_Html.code = function(attributes,children) {
	return coconut_react_Html.h("code",attributes,children);
};
coconut_react_Html.circle = function(attributes,children) {
	return coconut_react_Html.h("circle",attributes,children);
};
coconut_react_Html.canvas = function(attributes,children) {
	return coconut_react_Html.h("canvas",attributes,children);
};
coconut_react_Html.button = function(attributes,children) {
	return coconut_react_Html.h("button",attributes,children);
};
coconut_react_Html.br = function(attributes) {
	return coconut_react_Html.h("br",attributes);
};
coconut_react_Html.body = function(attributes,children) {
	return coconut_react_Html.h("body",attributes,children);
};
coconut_react_Html.blockquote = function(attributes,children) {
	return coconut_react_Html.h("blockquote",attributes,children);
};
coconut_react_Html.b = function(attributes,children) {
	return coconut_react_Html.h("b",attributes,children);
};
coconut_react_Html.audio = function(attributes,children) {
	return coconut_react_Html.h("audio",attributes,children);
};
coconut_react_Html.aside = function(attributes,children) {
	return coconut_react_Html.h("aside",attributes,children);
};
coconut_react_Html.article = function(attributes,children) {
	return coconut_react_Html.h("article",attributes,children);
};
coconut_react_Html.a = function(attributes,children) {
	return coconut_react_Html.h("a",attributes,children);
};
var coconut_react_Key = {};
coconut_react_Key.ofObj = function(o) {
	var id = o.__id__ || (o.__id__ = $global.$haxeUID++);
	return id;
};
var coconut_react_Renderer = function() { };
coconut_react_Renderer.__name__ = true;
coconut_react_Renderer.mountInto = function(target,vdom) {
	ReactDOM.render(vdom,target);
};
coconut_react_Renderer.getNative = function(view) {
	return ReactDOM.findDOMNode(view);
};
coconut_react_Renderer.updateAll = function() {
	tink_state_Observable.updateAll();
};
var tink_state_Invalidatable = function() { };
tink_state_Invalidatable.__name__ = true;
tink_state_Invalidatable.prototype = {
	__class__: tink_state_Invalidatable
};
var coconut_react__$View_Rewrapped = function() {
	React.Component.call(this);
};
coconut_react__$View_Rewrapped.__name__ = true;
coconut_react__$View_Rewrapped.__interfaces__ = [tink_state_Invalidatable];
coconut_react__$View_Rewrapped.__super__ = React.Component;
coconut_react__$View_Rewrapped.prototype = $extend(React.Component.prototype,{
	observable: function() {
		return this.props.target.__rendered;
	}
	,componentDidMount: function() {
		this.props.target.componentDidMount();
		this.link = this.observable().onInvalidate(this);
	}
	,componentDidUpdate: function(_,_1) {
		this.props.target.componentDidUpdate(null,null);
	}
	,componentWillUnmount: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		this.props.target.componentWillUnmount();
	}
	,invalidate: function() {
		this.forceUpdate();
	}
	,render: function() {
		return this.observable().getValue();
	}
	,__class__: coconut_react__$View_Rewrapped
});
var coconut_router_History = function(l2r,r2l) {
	this.locationToRoute = l2r;
	this.routeToLocation = r2l;
};
coconut_router_History.__name__ = true;
coconut_router_History.prototype = {
	push: function(route) {
		var url = tink_Url.toString(this.routeToLocation(route));
		window.history.pushState(null,null,url);
		window.scroll({ top : 0});
	}
	,replace: function(route) {
		var url = tink_Url.toString(this.routeToLocation(route));
		window.history.replaceState(null,null,url);
		window.scroll({ top : 0});
	}
	,back: function() {
		window.history.back();
	}
	,__class__: coconut_router_History
};
var coconut_router_Router = function(__coco_data_) {
	var _gthis = this;
	this.__coco_renderScreen = new coconut_ui_internal_Slot(this,null,null);
	this.__coco_locationToRoute = new coconut_ui_internal_Slot(this,null,null);
	this.__coco_routeToLocation = new coconut_ui_internal_Slot(this,null,null);
	this.__coco_current = tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
		return _gthis.locationToRoute(tink_state_Observable.get_value(spectatory_Location.href));
	}));
	this.__initAttributes(__coco_data_);
	var snapshot = null;
	coconut_react_View.call(this,$bind(this,this.coconutRender),null,null,null,null);
};
coconut_router_Router.__name__ = true;
coconut_router_Router.fromHxx = function(attributes) {
	return React.createElement(coconut_router_Router,attributes);
};
coconut_router_Router.__super__ = coconut_react_View;
coconut_router_Router.prototype = $extend(coconut_react_View.prototype,{
	renderScreen: function(a0) {
		return (tink_state_Observable.get_value(this.__coco_renderScreen))(a0);
	}
	,locationToRoute: function(a0) {
		return (tink_state_Observable.get_value(this.__coco_locationToRoute))(a0);
	}
	,routeToLocation: function(a0) {
		return (tink_state_Observable.get_value(this.__coco_routeToLocation))(a0);
	}
	,coconutRender: function() {
		var _gthis = this;
		return coconut_react_Implicit.fromHxx({ defaults : coconut_ui_internal_ImplicitValues._new([new coconut_ui_internal_SingleImplicit(coconut_ui_internal_TypeKey.ofClass(coconut_router_History),tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
			return new coconut_router_History($bind(_gthis,_gthis.locationToRoute),$bind(_gthis,_gthis.routeToLocation));
		})))]), children : [this.renderScreen(tink_state_Observable.get_value(this.__coco_current))]});
	}
	,__initAttributes: function(attributes) {
		this.__coco_renderScreen.setData(attributes.renderScreen);
		this.__coco_locationToRoute.setData(attributes.locationToRoute);
		this.__coco_routeToLocation.setData(attributes.routeToLocation);
	}
	,get_current: function() {
		return tink_state_Observable.get_value(this.__coco_current);
	}
	,__class__: coconut_router_Router
});
var coconut_ui_Ref = {};
coconut_ui_Ref._new = function(f) {
	var this1 = f;
	return this1;
};
coconut_ui_Ref.merge = function(this1,other) {
	return function(v) {
		this1(v);
		other(v);
	};
};
var coconut_ui_internal_Children = {};
coconut_ui_internal_Children.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
coconut_ui_internal_Children.get = function(this1,index) {
	if(this1 == null) {
		return null;
	} else {
		return this1[index];
	}
};
coconut_ui_internal_Children.ofSingle = function(r) {
	return [r];
};
coconut_ui_internal_Children.concat = function(this1,that) {
	if(this1 == null) {
		return that;
	} else {
		return this1.concat(that);
	}
};
coconut_ui_internal_Children.prepend = function(this1,r) {
	if(this1 == null) {
		if(r == null) {
			return null;
		} else {
			var v = r;
			return coconut_ui_internal_Children.ofSingle(v);
		}
	} else if(r == null) {
		var v = this1;
		return v;
	} else {
		var a = this1;
		var b = r;
		return [b].concat(a);
	}
};
coconut_ui_internal_Children.append = function(this1,r) {
	if(this1 == null) {
		if(r == null) {
			return null;
		} else {
			var v = r;
			return coconut_ui_internal_Children.ofSingle(v);
		}
	} else if(r == null) {
		var v = this1;
		return v;
	} else {
		var a = this1;
		var b = r;
		return a.concat([b]);
	}
};
var coconut_ui_internal_TypeKey = {};
coconut_ui_internal_TypeKey.ofClass = function(t) {
	return t;
};
coconut_ui_internal_TypeKey.ofEnum = function(t) {
	return t;
};
var coconut_ui_internal_SingleImplicit = function(key,val) {
	this.key = key;
	this.val = tink_state_Observable.map(val,tink_state_Transform.plain(function(x) {
		return x;
	}));
};
coconut_ui_internal_SingleImplicit.__name__ = true;
coconut_ui_internal_SingleImplicit.prototype = {
	__class__: coconut_ui_internal_SingleImplicit
};
var tink_state_Invalidator = function() {
	this.list = new tink_core_CallbackList();
};
tink_state_Invalidator.__name__ = true;
tink_state_Invalidator.prototype = {
	onInvalidate: function(i) {
		var _this = this.list;
		var node = new tink_core__$Callback_ListCell(tink_core_Callback.fromNiladic($bind(i,i.invalidate)),_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	,fire: function() {
		this.list.invoke(tink_core_Noise.Noise);
	}
	,__class__: tink_state_Invalidator
};
var coconut_ui_internal_Slot = function(owner,comparator,defaultData) {
	tink_state_Invalidator.call(this);
	this.owner = owner;
	var tmp;
	if(comparator == null) {
		tmp = function(a,b) {
			return a == b;
		};
	} else {
		var v = comparator;
		tmp = v;
	}
	this.comparator = tmp;
	this.data = this.defaultData = defaultData;
	if(defaultData != null) {
		defaultData.onInvalidate(this);
	}
};
coconut_ui_internal_Slot.__name__ = true;
coconut_ui_internal_Slot.__interfaces__ = [tink_state_ObservableObject,tink_state_Invalidatable];
coconut_ui_internal_Slot.__super__ = tink_state_Invalidator;
coconut_ui_internal_Slot.prototype = $extend(tink_state_Invalidator.prototype,{
	get_value: function() {
		return tink_state_Observable.get_value(this);
	}
	,observe: function() {
		return this;
	}
	,invalidate: function() {
		this.fire();
	}
	,getComparator: function() {
		return this.comparator;
	}
	,getValue: function() {
		var _g = this.data;
		var tmp;
		if(_g == null) {
			tmp = null;
		} else {
			var data = _g;
			var _g = data.getValue();
			if(_g == null && (data != this.defaultData && this.defaultData != null)) {
				tmp = this.defaultData.getValue();
			} else {
				var v = _g;
				tmp = v;
			}
		}
		return this.last = tmp;
	}
	,isValid: function() {
		if(this.data != null) {
			return this.data.isValid();
		} else {
			return true;
		}
	}
	,setData: function(data) {
		if(data == null) {
			data = this.defaultData;
		}
		if(data == this.data) {
			return;
		}
		this.data = data;
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		if(data != this.defaultData) {
			this.link = data.onInvalidate(this);
		}
		this.fire();
	}
	,toString: function() {
		return "Slot(" + Std.string(this.owner) + ")";
	}
	,__class__: coconut_ui_internal_Slot
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.prototype = {
	exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
haxe_iterators_MapKeyValueIterator.__name__ = true;
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var react_ReactComponent = function() { };
react_ReactComponent.__name__ = true;
var react_ReactContext = {};
react_ReactContext.toReactType = function(this1) {
	return this1;
};
var react_ReactRef = {};
react_ReactRef.get_current = function(this1) {
	return this1.current;
};
var react_ReactType = {};
react_ReactType.fromString = function(s) {
	return s;
};
react_ReactType.fromFunction = function(f) {
	return f;
};
react_ReactType.fromFunctionWithProps = function(f) {
	return f;
};
react_ReactType.fromComp = function(cls) {
	if(cls.__jsxStatic != null) {
		return cls.__jsxStatic;
	}
	return cls;
};
var react_ReactTypeOf = {};
react_ReactTypeOf._new = function(node) {
	var this1 = node;
	return this1;
};
react_ReactTypeOf.fromFunctionWithProps = function(f) {
	var this1 = react_ReactType.fromFunctionWithProps(f);
	return this1;
};
react_ReactTypeOf.fromComp = function(cls) {
	var this1 = react_ReactType.fromComp(cls);
	return this1;
};
react_ReactTypeOf.fromFunctionWithoutProps = function(f) {
	var this1 = react_ReactType.fromFunction(f);
	return this1;
};
react_ReactTypeOf.fromCompWithoutProps = function(cls) {
	var this1 = react_ReactType.fromComp(cls);
	return this1;
};
react_ReactTypeOf.fromHxx = function(self,hxxMeta,props) {
	return React.createElement(self,hxxMeta.key != null ? Object.assign(hxxMeta,props) : props);
};
var tink_Url = {};
tink_Url.get_pathWithQuery = function(this1) {
	if(this1.query == null) {
		return this1.path;
	} else {
		return (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query);
	}
};
tink_Url._new = function(parts) {
	var this1 = parts;
	return this1;
};
tink_Url.resolve = function(this1,that) {
	if(that.scheme != null) {
		return that;
	} else if(that.host != null) {
		if(that.scheme != null) {
			return that;
		} else {
			var copy = Reflect.copy(that);
			copy.scheme = this1.scheme;
			return copy;
		}
	} else {
		var parts = { path : tink_url_Path.join(this1.path,that.path), payload : "", scheme : this1.scheme, query : that.query, auth : this1.auth, host : this1.host, hash : that.hash};
		tink_Url.makePayload(parts);
		var this1 = parts;
		return this1;
	}
};
tink_Url.makePayload = function(parts) {
	var payload = "";
	var _g = parts.scheme;
	var _g = parts.query;
	var _g = parts.payload;
	var _g = parts.path;
	var _g = parts.hosts;
	var _g = parts.host;
	var _g1 = parts.hash;
	var _g1 = parts.auth;
	if(_g1 == null) {
		if(_g != null) {
			var host = _g;
			payload += "//" + (host == null ? "null" : host);
		}
	} else if(_g == null) {
		var auth = _g1;
		payload += "//" + (auth == null ? "null" : auth) + "@";
	} else {
		var auth = _g1;
		var host = _g;
		payload += "//" + (auth == null ? "null" : auth) + "@" + (host == null ? "null" : host);
	}
	payload += parts.path == null ? "null" : parts.path;
	var _g = parts.query;
	if(_g != null) {
		var v = _g;
		payload += "?" + (v == null ? "null" : v);
	}
	var _g = parts.hash;
	if(_g != null) {
		var v = _g;
		payload += "#" + v;
	}
	parts.payload = payload.toString();
};
tink_Url.toString = function(this1) {
	if(this1.scheme == null) {
		return this1.payload;
	} else {
		return "" + this1.scheme + ":" + this1.payload;
	}
};
tink_Url.fromString = function(s) {
	return tink_Url.parse(s);
};
tink_Url.noop = function(_) {
};
tink_Url.parse = function(s,onError) {
	if(s == null) {
		return tink_Url.parse("");
	}
	if(onError == null) {
		onError = tink_Url.noop;
	}
	s = StringTools.trim(s);
	if(StringTools.startsWith(s,"data:")) {
		var this1 = { scheme : "data", payload : HxOverrides.substr(s,5,null)};
		return this1;
	}
	var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
	var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
	FORMAT.match(s);
	var hosts;
	var _g = FORMAT.matched(7);
	if(_g == null) {
		hosts = [];
	} else {
		var v = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = v.split(",");
		while(_g1 < _g2.length) {
			var host = _g2[_g1];
			++_g1;
			HOST.match(host);
			var host1;
			var _g3 = HOST.matched(2);
			var _g4 = HOST.matched(3);
			if(_g3 == null) {
				var ipv4 = _g4;
				host1 = ipv4;
			} else if(_g4 == null) {
				var ipv6 = _g3;
				host1 = "[" + ipv6 + "]";
			} else {
				onError("invalid host " + host);
				host1 = null;
			}
			var port;
			var _g5 = HOST.matched(5);
			if(_g5 == null) {
				port = null;
			} else {
				var v = _g5;
				var _g6 = Std.parseInt(v);
				if(_g6 == null) {
					onError("invalid port " + v);
					port = null;
				} else {
					var p = _g6;
					port = p;
				}
			}
			_g.push(tink_url_Host._new(host1,port));
		}
		hosts = _g;
	}
	var path = FORMAT.matched(8);
	if(hosts.length > 0 && path.charAt(0) != "/") {
		path = "/" + path;
	}
	var this1 = { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), host : hosts[0], hosts : hosts, auth : FORMAT.matched(6), path : tink_url_Path.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
	return this1;
};
tink_Url.make = function(parts) {
	var parts1 = { payload : "", path : parts.path, query : parts.query, host : parts.host, hosts : parts.hosts, auth : parts.auth, scheme : parts.scheme, hash : parts.hash};
	tink_Url.makePayload(parts1);
	var this1 = parts1;
	return this1;
};
var tink_url_Host = {};
tink_url_Host._new = function(name,port) {
	var this1;
	if(port == null) {
		this1 = name;
	} else if(port > 65535 || port <= 0) {
		throw haxe_Exception.thrown("Invalid port");
	} else {
		this1 = "" + name + ":" + port;
	}
	return this1;
};
tink_url_Host.get_name = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			return v.split(":")[0];
		case 2:
			var _g1 = _g[1];
			var v = _g[0];
			return v + "]";
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
};
tink_url_Host.get_port = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			var _g1 = v.split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				var p = _g1;
				return Std.parseInt(p);
			}
			break;
		case 2:
			var _g1 = _g[0];
			var v = _g[1];
			var _g = v.split(":")[1];
			if(_g == null) {
				return null;
			} else {
				var p = _g;
				return Std.parseInt(p);
			}
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
};
tink_url_Host.toString = function(this1) {
	return this1;
};
var tink_url_Path = {};
tink_url_Path.parts = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split("/");
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		if(p != "") {
			var this1 = p;
			_g.push(this1);
		}
	}
	return _g;
};
tink_url_Path.get_absolute = function(this1) {
	return this1.charAt(0) == "/";
};
tink_url_Path.get_isDir = function(this1) {
	return this1.charAt(this1.length - 1) == "/";
};
tink_url_Path._new = function(s) {
	var this1 = s;
	return this1;
};
tink_url_Path.join = function(this1,that) {
	if(that == "") {
		return this1;
	} else if(that.charAt(0) == "/") {
		return that;
	} else if(this1.charAt(this1.length - 1) == "/") {
		return tink_url_Path.ofString(this1 + that);
	} else {
		var _g = this1.lastIndexOf("/");
		if(_g == -1) {
			return that;
		} else {
			var v = _g;
			return tink_url_Path.ofString(HxOverrides.substr(this1,0,v + 1) + (that == null ? "null" : that));
		}
	}
};
tink_url_Path.ofString = function(s) {
	var this1 = tink_url_Path.normalize(s);
	return this1;
};
tink_url_Path.normalize = function(s) {
	s = StringTools.trim(StringTools.replace(s,"\\","/"));
	if(s == ".") {
		return "./";
	}
	var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
	var parts = [];
	var isAbsolute = StringTools.startsWith(s,"/");
	var up = 0;
	var _g = 0;
	var _g1 = s.split("/");
	while(_g < _g1.length) {
		var part = _g1[_g];
		++_g;
		var _g2 = StringTools.trim(part);
		switch(_g2) {
		case "":
			break;
		case ".":
			break;
		case "..":
			if(parts.pop() == null) {
				++up;
			}
			break;
		default:
			var v = _g2;
			parts.push(v);
		}
	}
	if(isAbsolute) {
		parts.unshift("");
	} else {
		var _g = 0;
		var _g1 = up;
		while(_g < _g1) {
			var i = _g++;
			parts.unshift("..");
		}
	}
	if(isDir) {
		parts.push("");
	}
	return parts.join("/");
};
tink_url_Path.toString = function(this1) {
	return this1;
};
var tink_state__$State_StateObject = function() { };
tink_state__$State_StateObject.__name__ = true;
tink_state__$State_StateObject.__interfaces__ = [tink_state_ObservableObject];
tink_state__$State_StateObject.prototype = {
	__class__: tink_state__$State_StateObject
};
var tink_state__$State_SimpleState = function(value,comparator,guard) {
	tink_state_Invalidator.call(this);
	this.value = value;
	this.guard = guard;
	this.comparator = comparator;
	this.guardApplied = guard == null;
};
tink_state__$State_SimpleState.__name__ = true;
tink_state__$State_SimpleState.__interfaces__ = [tink_state__$State_StateObject];
tink_state__$State_SimpleState.warn = function(s) {
	$global.console.warn(s);
};
tink_state__$State_SimpleState.__super__ = tink_state_Invalidator;
tink_state__$State_SimpleState.prototype = $extend(tink_state_Invalidator.prototype,{
	isValid: function() {
		return true;
	}
	,getValue: function() {
		if(!this.guardApplied) {
			this.guardApplied = true;
			this.value = this.guard(this.value);
		}
		return this.value;
	}
	,getComparator: function() {
		return this.comparator;
	}
	,set: function(value) {
		if(tink_state_Observable.isUpdating) {
			$global.console.warn("Updating state in a binding");
		}
		if(this.guard != null) {
			this.getValue();
			value = this.guard(value);
		}
		var this1 = this.comparator;
		var b = this.value;
		var tmp;
		if(this1 == null) {
			tmp = value == b;
		} else {
			var f = this1;
			tmp = f(value,b);
		}
		if(!tmp) {
			this.value = value;
			this.fire();
		}
		return value;
	}
	,__class__: tink_state__$State_SimpleState
});
var tink_state_State = {};
tink_state_State.get_value = function(this1) {
	return tink_state_Observable.get_value(this1);
};
tink_state_State._new = function(value,comparator,guard) {
	var this1 = new tink_state__$State_SimpleState(value,comparator,guard);
	return this1;
};
tink_state_State.observe = function(this1) {
	return this1;
};
tink_state_State.transform = function(this1,rules) {
	return new tink_state__$State_CompoundState(tink_state_Observable.map(this1,tink_state_Transform.plain($bind(rules,rules.read))),function(value) {
		this1.set(rules.write(value));
	});
};
tink_state_State.bind = function(this1,options,cb) {
	return tink_state_Observable.bind(this1,options,cb);
};
tink_state_State.toggle = function(s) {
	s.set(!s.getValue());
};
tink_state_State.toCallback = function(this1) {
	return $bind(this1,this1.set);
};
tink_state_State.compound = function(source,update,comparator) {
	return new tink_state__$State_CompoundState(source,update,comparator);
};
var tink_state_Derived = function() { };
tink_state_Derived.__name__ = true;
tink_state_Derived.prototype = {
	__class__: tink_state_Derived
};
var tink_state__$Observable_AutoObservable = function(compute,comparator) {
	this.sync = true;
	this.subscriptions = null;
	this.last = null;
	this.valid = false;
	tink_state_Invalidator.call(this);
	this.compute = compute;
	this.comparator = comparator;
};
tink_state__$Observable_AutoObservable.__name__ = true;
tink_state__$Observable_AutoObservable.__interfaces__ = [tink_state_ObservableObject,tink_state_Derived,tink_state_Invalidatable];
tink_state__$Observable_AutoObservable.computeFor = function(o,fn) {
	var before = tink_state__$Observable_AutoObservable.cur;
	tink_state__$Observable_AutoObservable.cur = o;
	var ret = fn();
	tink_state__$Observable_AutoObservable.cur = before;
	return ret;
};
tink_state__$Observable_AutoObservable.untracked = function(fn) {
	var before = tink_state__$Observable_AutoObservable.cur;
	tink_state__$Observable_AutoObservable.cur = null;
	var ret = fn();
	tink_state__$Observable_AutoObservable.cur = before;
	return ret;
};
tink_state__$Observable_AutoObservable.track = function(o) {
	var ret = o.getValue();
	if(tink_state__$Observable_AutoObservable.cur != null) {
		tink_state__$Observable_AutoObservable.cur.subscribeTo(o,ret);
	}
	return ret;
};
tink_state__$Observable_AutoObservable.__super__ = tink_state_Invalidator;
tink_state__$Observable_AutoObservable.prototype = $extend(tink_state_Invalidator.prototype,{
	isValid: function() {
		return this.valid;
	}
	,getComparator: function() {
		return this.comparator;
	}
	,getValue: function() {
		var _gthis = this;
		var count = 0;
		while(!this.valid) if(++count == 100) {
			throw haxe_Exception.thrown("no result after 100 attempts");
		} else if(this.subscriptions != null) {
			this.valid = true;
			var _g = 0;
			var _g1 = this.subscriptions;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				if(s.hasChanged()) {
					this.valid = false;
					break;
				}
			}
			if(!this.valid) {
				var _g2 = 0;
				var _g3 = this.subscriptions;
				while(_g2 < _g3.length) {
					var s1 = _g3[_g2];
					++_g2;
					s1.unregister();
				}
				this.subscriptions = null;
			}
		} else {
			this.valid = true;
			this.subscriptions = [];
			this.sync = true;
			var before = tink_state__$Observable_AutoObservable.cur;
			tink_state__$Observable_AutoObservable.cur = this;
			var ret = _gthis.compute($bind(_gthis,_gthis.update));
			tink_state__$Observable_AutoObservable.cur = before;
			this.last = ret;
			this.sync = false;
		}
		return this.last;
	}
	,update: function(value) {
		if(!this.sync) {
			this.last = value;
			this.fire();
		}
	}
	,subscribeTo: function(source,cur) {
		if(this.valid) {
			this.subscriptions.push(new tink_state__$Observable_SubscriptionTo(source,cur,this));
		}
	}
	,invalidate: function() {
		if(this.valid) {
			this.valid = false;
			this.fire();
		}
	}
	,__class__: tink_state__$Observable_AutoObservable
});
var tink_state__$Observable_TransformObservable = function(source,transform) {
	this.last = null;
	this.valid = false;
	this.source = source;
	this.transform = transform;
	source.onInvalidate(this);
};
tink_state__$Observable_TransformObservable.__name__ = true;
tink_state__$Observable_TransformObservable.__interfaces__ = [tink_state_Invalidatable,tink_state_ObservableObject];
tink_state__$Observable_TransformObservable.prototype = {
	isValid: function() {
		return this.valid;
	}
	,invalidate: function() {
		this.valid = false;
	}
	,onInvalidate: function(i) {
		return this.source.onInvalidate(i);
	}
	,getValue: function() {
		if(this.valid == false) {
			this.valid = true;
			this.last = this.transform(this.source.getValue());
		}
		return this.last;
	}
	,getComparator: function() {
		return null;
	}
	,__class__: tink_state__$Observable_TransformObservable
};
var tink_state_Transform = {};
tink_state_Transform._new = function(f) {
	var this1 = f;
	return this1;
};
tink_state_Transform.apply = function(this1,value) {
	return this1(value);
};
tink_state_Transform.naiveAsync = function(f) {
	var this1 = function(p) {
		switch(p._hx_index) {
		case 0:
			var this1 = new tink_core__$Future_SuspendableFuture(function(_) {
				return null;
			});
			return this1;
		case 1:
			var v = p.result;
			return f(v);
		case 2:
			var e = p.error;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	};
	return this1;
};
tink_state_Transform.naive = function(f) {
	var this1 = function(p) {
		switch(p._hx_index) {
		case 0:
			return tink_state_Promised.Loading;
		case 1:
			var v = p.result;
			return tink_state_Promised.Done(f(v));
		case 2:
			var e = p.error;
			return tink_state_Promised.Failed(e);
		}
	};
	return this1;
};
tink_state_Transform.plain = function(f) {
	var this1 = f;
	return this1;
};
var tink_pure_List = {};
tink_pure_List.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
tink_pure_List.first = function(this1,predicate) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate == null || predicate(x)) {
			return haxe_ds_Option.Some(x);
		}
	}
	return haxe_ds_Option.None;
};
tink_pure_List.last = function(this1,predicate) {
	if(this1 == null) {
		return haxe_ds_Option.None;
	} else if(predicate == null) {
		var _last = null;
		_last = function(v) {
			var _g = v.tails;
			if(_g.length == 0) {
				return haxe_ds_Option.Some(v.value);
			} else {
				var tails = _g;
				return _last(tails[tails.length - 1]);
			}
		};
		return _last(this1);
	} else {
		var found = false;
		var ret = null;
		var _g = new tink_pure_NodeIterator(this1);
		while(_g.list.length > 0) {
			var x = _g.next();
			if(predicate(x)) {
				found = true;
				ret = x;
			}
		}
		if(found) {
			return haxe_ds_Option.Some(ret);
		} else {
			return haxe_ds_Option.None;
		}
	}
};
tink_pure_List.get = function(this1,index) {
	if(index < 0) {
		return haxe_ds_Option.None;
	}
	var iter = new tink_pure_NodeIterator(this1);
	var v = null;
	while(index-- >= 0) {
		if(iter.list.length <= 0) {
			return haxe_ds_Option.None;
		}
		v = iter.next();
	}
	return haxe_ds_Option.Some(v);
};
tink_pure_List._new = function() {
	var this1 = null;
	return this1;
};
tink_pure_List.node = function(this1) {
	return this1;
};
tink_pure_List.concat = function(this1,that) {
	if(this1 == null) {
		return that;
	} else if(that == null) {
		return this1;
	} else {
		return new tink_pure__$List_Node(this1.length + (that == null ? 0 : that.length),this1.value,this1.tails.concat([that]));
	}
};
tink_pure_List.sort = function(this1,compare) {
	var arr = tink_pure_List.toArray(this1);
	arr.sort(compare);
	return tink_pure_List.fromArray(arr);
};
tink_pure_List.append = function(this1,value) {
	if(this1 == null) {
		return new tink_pure__$List_Node(1,value);
	} else {
		return new tink_pure__$List_Node(this1.length + 1,this1.value,this1.tails.concat([new tink_pure__$List_Node(1,value)]));
	}
};
tink_pure_List.prepend = function(this1,value) {
	if(this1 == null) {
		return new tink_pure__$List_Node(1,value);
	} else {
		return new tink_pure__$List_Node(this1.length + 1,value,[this1]);
	}
};
tink_pure_List.replace = function(this1,select,generate) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var v = _g1.next();
		if(select(v)) {
			_g.push(generate(v));
		} else {
			_g.push(v);
		}
	}
	return tink_pure_List.fromArray(_g);
};
tink_pure_List.exists = function(this1,predicate) {
	var ret = false;
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate(x)) {
			ret = true;
			break;
		}
	}
	return ret;
};
tink_pure_List.count = function(this1,predicate) {
	var ret = 0;
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate(x)) {
			++ret;
		}
	}
	return ret;
};
tink_pure_List.iterator = function(this1) {
	return new tink_pure_NodeIterator(this1);
};
tink_pure_List.toIterable = function(this1) {
	var _e = this1;
	return { iterator : function() {
		return new tink_pure_NodeIterator(_e);
	}};
};
tink_pure_List.filter = function(this1,f) {
	if(this1 == null) {
		return null;
	} else {
		return this1.filter(f);
	}
};
tink_pure_List.map = function(this1,f) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var i = _g1.next();
		_g.push(f(i));
	}
	return tink_pure_List.fromArray(_g);
};
tink_pure_List.select = function(this1,f) {
	var arr = [];
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var i = _g.next();
		var _g1 = f(i);
		switch(_g1._hx_index) {
		case 0:
			var v = _g1.v;
			arr.push(v);
			break;
		case 1:
			break;
		}
	}
	return tink_pure_List.fromArray(arr);
};
tink_pure_List.fold = function(this1,f,first) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		first = f(x,first);
	}
	return first;
};
tink_pure_List.single = function(v) {
	return new tink_pure__$List_Node(1,v);
};
tink_pure_List.toArray = function(this1) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var v = _g1.next();
		_g.push(v);
	}
	return _g;
};
tink_pure_List.fromArray = function(i) {
	var ret = null;
	var len = 0;
	var pos = i.length;
	while(pos-- > 0) ret = new tink_pure__$List_Node(++len,i[pos],ret == null ? tink_pure__$List_Node.EMPTY : [ret]);
	return ret;
};
var tink_pure__$List_Node = function(length,value,tails) {
	this.value = value;
	this.length = length;
	this.tails = tails == null ? tink_pure__$List_Node.EMPTY : tails;
};
tink_pure__$List_Node.__name__ = true;
tink_pure__$List_Node.prototype = {
	filter: function(f) {
		var iter = new tink_pure_NodeIterator(this);
		var ret = [];
		while(iter.list.length > 0) {
			var value = iter.next();
			var res = f(value);
			if(res > 0) {
				ret.push(value);
			}
			if((res & 3) == 3) {
				break;
			}
		}
		return tink_pure_List.fromArray(ret);
	}
	,__class__: tink_pure__$List_Node
};
var tink_url__$Query_QueryStringParser = function(s,sep,set,pos) {
	this.s = s == null ? "" : s;
	this.sep = sep;
	this.set = set;
	this.pos = pos;
};
tink_url__$Query_QueryStringParser.__name__ = true;
tink_url__$Query_QueryStringParser.trimmedSub = function(s,start,end) {
	if(start >= s.length) {
		var this1 = "";
		return this1;
	}
	while(s.charCodeAt(start) < 33) ++start;
	if(end < s.length - 1) {
		while(s.charCodeAt(end - 1) < 33) --end;
	}
	var this1 = s.substring(start,end);
	return this1;
};
tink_url__$Query_QueryStringParser.prototype = {
	hasNext: function() {
		return this.pos < this.s.length;
	}
	,next: function() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url_Portion.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url_Portion.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url_Portion.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
	,__class__: tink_url__$Query_QueryStringParser
};
var tink_pure_Mapping = {};
tink_pure_Mapping.exists = function(this1,key) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var p = _g.next();
		if(p.condensed != null) {
			return p.condensed.exists(key);
		} else if(p.key == key) {
			return p.isset;
		}
	}
	return false;
};
tink_pure_Mapping.get = function(this1,key) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var p = _g.next();
		if(p.condensed != null) {
			return p.condensed.get(key);
		} else if(p.key == key) {
			return p.value;
		}
	}
	return null;
};
tink_pure_Mapping.without = function(this1,key) {
	return tink_pure_List.prepend(this1,{ key : key, isset : false, value : null, condensed : null});
};
tink_pure_Mapping.with = function(this1,key,value) {
	return tink_pure_List.prepend(this1,{ key : key, isset : true, value : value, condensed : null});
};
var spectatory_Location = function() { };
spectatory_Location.__name__ = true;
spectatory_Location.back = function() {
	window.history.back();
};
spectatory_Location.push = function(url) {
	window.history.pushState(null,null,url);
};
spectatory_Location.replace = function(url) {
	window.history.replaceState(null,null,url);
};
var tink_Stringly = {};
tink_Stringly.isNumber = function(s,allowFloat) {
	if(s.length == 0) {
		return false;
	}
	var pos = 0;
	var max = s.length;
	if(pos < max && s.charCodeAt(pos) == 45) {
		++pos;
	}
	if(!allowFloat) {
		if(pos < max && s.charCodeAt(pos) == 48 && pos++ > -1) {
			if(pos < max && s.charCodeAt(pos) == 120) {
				++pos;
			}
		}
	}
	while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
	if(allowFloat && pos < max) {
		if(pos < max && s.charCodeAt(pos) == 46 && pos++ > -1) {
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
		if(pos < max && s.charCodeAt(pos) == 101 && pos++ > -1 || pos < max && s.charCodeAt(pos) == 69 && pos++ > -1) {
			if(!(pos < max && s.charCodeAt(pos) == 43 && pos++ > -1)) {
				if(pos < max && s.charCodeAt(pos) == 45) {
					++pos;
				}
			}
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
	}
	return pos == max;
};
tink_Stringly.toBool = function(this1) {
	if(this1 != null) {
		switch(StringTools.trim(this1).toLowerCase()) {
		case "0":case "false":case "no":
			return false;
		default:
			return true;
		}
	} else {
		return false;
	}
};
tink_Stringly.parseFloat = function(this1) {
	var _g = StringTools.trim(this1);
	var v = _g;
	if(tink_Stringly.isNumber(v,true)) {
		return tink_core_Outcome.Success(parseFloat(v));
	} else {
		var v = _g;
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v + " (encoded as " + this1 + ") is not a valid float",{ fileName : "tink/Stringly.hx", lineNumber : 60, className : "tink._Stringly.Stringly_Impl_", methodName : "parseFloat"}));
	}
};
tink_Stringly.toFloat = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseFloat(this1));
};
tink_Stringly.parseInt = function(this1) {
	var _g = StringTools.trim(this1);
	var v = _g;
	if(tink_Stringly.isNumber(v,false)) {
		return tink_core_Outcome.Success(Std.parseInt(v));
	} else {
		var v = _g;
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v + " (encoded as " + this1 + ") is not a valid integer",{ fileName : "tink/Stringly.hx", lineNumber : 71, className : "tink._Stringly.Stringly_Impl_", methodName : "parseInt"}));
	}
};
tink_Stringly.toInt = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseInt(this1));
};
tink_Stringly.ofBool = function(b) {
	if(b) {
		return "true";
	} else {
		return "false";
	}
};
tink_Stringly.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
tink_Stringly.ofFloat = function(f) {
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
tink_core_Annex.prototype = {
	__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		var _e = this1;
		var _g = function(data) {
			tink_core_Callback.invoke(_e,data);
		};
		var data1 = data;
		tink_core_Callback.defer(function() {
			_g(data1);
		});
	}
};
tink_core_Callback.ignore = function(cb) {
	return function(_) {
		tink_core_Callback.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core_LinkObject = function() { };
tink_core_LinkObject.__name__ = true;
tink_core_LinkObject.prototype = {
	__class__: tink_core_LinkObject
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	invoke: function(data) {
		if(this.list != null) {
			tink_core_Callback.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_CallbackList = function() {
	this.busy = false;
	this.queue = [];
	this.used = 0;
	this.cells = [];
};
tink_core_CallbackList.__name__ = true;
tink_core_CallbackList.prototype = {
	ondrain: function() {
	}
	,get_length: function() {
		return this.used;
	}
	,release: function() {
		if(--this.used < this.used >> 1) {
			this.compact();
		}
	}
	,add: function(cb) {
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		this.used++;
		return node;
	}
	,invoke: function(data,destructive) {
		if(this.busy) {
			var _g = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g1 = 0;
			var _g2 = length;
			while(_g1 < _g2) {
				var i = _g1++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g1 = 0;
				var _g2 = length;
				while(_g1 < _g2) {
					var i = _g1++;
					var _this = this.cells[i];
					_this.cb = null;
					_this.list = null;
				}
				var _g1 = 0;
				var _g2 = added;
				while(_g1 < _g2) {
					var i = _g1++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		var _g1 = tink_core_TypedError.asError(e);
		var tmp;
		if(_g1 == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e);
		} else {
			var e = _g1;
			tmp = e;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core_FutureObject = function() { };
tink_core_FutureObject.__name__ = true;
tink_core_FutureObject.prototype = {
	__class__: tink_core_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f(_gthis.value.get()).handle($yield);
		});
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(f);
	return this1;
};
tink_core_Future.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this1 = l1;
		ret1.handle(function(_) {
			this1.cancel();
		});
	}
	if(l2 != null) {
		var this2 = l2;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	return ret1;
};
tink_core_Future.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core_Future.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(t) {
		var gather = false;
		if(gather == null) {
			gather = true;
		}
		var ret = other.map(function(a) {
			return merger(t,a);
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatten = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		var inner = null;
		var outer = f.handle(function(second) {
			inner = second.handle($yield);
		});
		var this1 = new tink_core_SimpleLink(function() {
			if(inner != null) {
				inner.cancel();
			}
		});
		return new tink_core__$Callback_LinkPair(outer,this1);
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var gather1 = false;
		if(gather1 == null) {
			gather1 = true;
		}
		var ret1 = ret.flatMap((function(f) {
			return function(results) {
				var gather = false;
				if(gather == null) {
					gather = true;
				}
				var ret = f[0].map((function() {
					return function(result) {
						return results.concat([result]);
					};
				})());
				if(gather) {
					return ret.gather();
				} else {
					return ret;
				}
			};
		})(f));
		ret = gather1 ? ret1.gather() : ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.fromMany = function(futures) {
	return tink_core_Future.ofMany(futures);
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core_FutureObject);
};
tink_core_Future.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			f($yield);
			return null;
		});
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core_Callback.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = a.map(haxe_ds_Either.Left);
	var tmp = gather ? ret.gather() : ret;
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = b.map(haxe_ds_Either.Right);
	return tink_core_Future.first(tmp,gather ? ret.gather() : ret);
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var ret = map(d).map(tink_core_Outcome.Success);
			return ret.gather();
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
	return ret.gather();
};
tink_core_Future._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core_Future._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core_Future._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	return tink_core_Future.async(function(cb) {
		haxe_Timer.delay(function() {
			cb(value.get());
		},ms);
	});
};
var tink_core_FutureTrigger = function() {
	this.list = new tink_core_CallbackList();
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		return f.handle($yield);
	});
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			v.used++;
			return node;
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				ret.trigger(f(v));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				f(v).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = true;
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.suspended = true;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList();
	this.callbacks.ondrain = function() {
		if(_gthis.callbacks != null) {
			_gthis.suspended = true;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	trigger: function(value) {
		var _g = this.callbacks;
		if(_g != null) {
			var list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	,handle: function(callback) {
		var _g = this.callbacks;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				$yield(f(res));
			});
		});
	}
	,flatMap: function(f) {
		return tink_core_Future.flatten(this.map(f));
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		this.handle(tink_core_Callback.fromNiladic(function() {
		}));
		return this;
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core_Lazy = {};
tink_core_Lazy.get = function(this1) {
	return this1.get();
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return this1.map(f);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get());
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get()).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
tink_core_NamedWith.prototype = {
	__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = true;
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = true;
tink_core_OptionIter.prototype = {
	hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option._hx_index) {
	case 0:
		var value = option.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 48, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var tink_core_Progress = {};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	var value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	var signal = tink_core_Signal.trigger();
	var future = tink_core_Future.async(function(cb) {
		var progress = function(v,total) {
			switch(value._hx_index) {
			case 0:
				var current = value.v;
				if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
					var this1 = new tink_core_MPair(v,total);
					var pv = this1;
					value = tink_core_ProgressType.InProgress(pv);
					signal.handlers.invoke(pv);
				}
				break;
			case 1:
				var _g = value.v;
				break;
			}
		};
		var finish = function(v) {
			if(value._hx_index == 1) {
				var _g = value.v;
			} else {
				value = tink_core_ProgressType.Finished(v);
				cb(v);
			}
		};
		f(progress,finish);
	});
	return new tink_core_CompositeProgress(future,signal);
};
tink_core_Progress.asFuture = function(this1) {
	return this1;
};
tink_core_Progress.asPromise = function(p) {
	return p;
};
tink_core_Progress.promise = function(v) {
	return new tink_core_PromiseProgress(v);
};
tink_core_Progress.future = function(v) {
	return new tink_core_FutureProgress(v);
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.next(this1,f);
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = true;
tink_core_SignalObject.prototype = {
	__class__: tink_core_SignalObject
};
var tink_core_ProgressObject = function() { };
tink_core_ProgressObject.__name__ = true;
tink_core_ProgressObject.__interfaces__ = [tink_core_SignalObject,tink_core_FutureObject];
var tink_core_CompositeProgress = function(future,signal) {
	this.future = future;
	this.signal = signal;
};
tink_core_CompositeProgress.__name__ = true;
tink_core_CompositeProgress.__interfaces__ = [tink_core_ProgressObject];
tink_core_CompositeProgress.prototype = {
	map: function(f) {
		var ret = this.future.map(f);
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.future.flatMap(f);
		return ret.gather();
	}
	,handle: function(callback) {
		return this.future.handle(callback);
	}
	,listen: function(callback) {
		return this.signal.listen(callback);
	}
	,gather: function() {
		return this.future.gather();
	}
	,eager: function() {
		return this.future.eager();
	}
	,__class__: tink_core_CompositeProgress
};
var tink_core_ProgressTrigger = function() {
	this.value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	tink_core_CompositeProgress.call(this,this.futureTrigger = new tink_core_FutureTrigger(),this.signalTrigger = tink_core_Signal.trigger());
};
tink_core_ProgressTrigger.__name__ = true;
tink_core_ProgressTrigger.__super__ = tink_core_CompositeProgress;
tink_core_ProgressTrigger.prototype = $extend(tink_core_CompositeProgress.prototype,{
	progress: function(v,total) {
		var _g = this.value;
		switch(_g._hx_index) {
		case 0:
			var current = _g.v;
			if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
				var this1 = new tink_core_MPair(v,total);
				var pv = this1;
				this.value = tink_core_ProgressType.InProgress(pv);
				this.signalTrigger.handlers.invoke(pv);
			}
			break;
		case 1:
			var _g1 = _g.v;
			break;
		}
	}
	,finish: function(v) {
		var _g = this.value;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
		} else {
			this.value = tink_core_ProgressType.Finished(v);
			this.futureTrigger.trigger(v);
		}
	}
	,asProgress: function() {
		return this;
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_FutureProgress = function(future) {
	var ret = future.flatMap(function(progress) {
		return progress;
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		future.handle(function(progress) {
			progress.listen(cb);
		});
	}));
};
tink_core_FutureProgress.__name__ = true;
tink_core_FutureProgress.__super__ = tink_core_CompositeProgress;
tink_core_FutureProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_FutureProgress
});
var tink_core_PromiseProgress = function(promise) {
	var ret = promise.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var progress = o.data;
			return progress.map(tink_core_Outcome.Success);
		case 1:
			var e = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		promise.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var progress = o.data;
				progress.listen(cb);
				break;
			case 1:
				var e = o.failure;
				break;
			}
		});
	}));
};
tink_core_PromiseProgress.__name__ = true;
tink_core_PromiseProgress.__super__ = tink_core_CompositeProgress;
tink_core_PromiseProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_PromiseProgress
});
var tink_core_ProgressValue = {};
tink_core_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_core_ProgressType = $hxEnums["tink.core.ProgressType"] = { __ename__ : true, __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var tink_core_TotalTools = function() { };
tink_core_TotalTools.__name__ = true;
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var t1 = a.v;
			var t2 = b.v;
			return t1 == t2;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var this1 = tink_core_Future.async(function(cb) {
		f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	},lazy);
	return this1;
};
tink_core_Promise.eager = function(this1) {
	return this1.eager();
};
tink_core_Promise.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core_Promise.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core_Promise.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
	return ret.gather();
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	return tink_core_Promise.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	});
};
tink_core_Promise.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core_Promise.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Future._tryMap(this1,function(_) {
		return v;
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core_Promise.next(this1,function(t) {
		return tink_core_Promise.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback,lazy) {
	return tink_core_Future.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						cb(tink_core_Outcome.Failure(e));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		return HxOverrides.now() / 1000 * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		var ret = gen().flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(new tink_core__$Promise_TinkError(e));
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	return tink_core_Future.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core_Promise.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core_Future.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter_current;
			var iter_array;
			iter_current = 0;
			iter_array = a;
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter_current < iter_array.length && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index = i - 1;
				iter_current += 1;
				linkArray.push(iter_array[iter_current - 1].handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						set(index,v);
						break;
					case 1:
						var e = o.failure;
						fail(e);
						break;
					}
				}));
			};
			while(true) {
				var tmp;
				if(iter_current < iter_array.length && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core_CallbackLink.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core_Promise.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core_Promise.next(a[index],function(head) {
				return tink_core_Promise.next(loop(index + 1),function(tail) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
				});
			});
		}
	};
	return loop(0);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		var ret1 = ret.map(function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
		return ret1.gather();
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core__$Promise_TinkError = function(e) {
	Error.call(this,e.message);
	this.data = e;
};
tink_core__$Promise_TinkError.__name__ = true;
tink_core__$Promise_TinkError.__super__ = Error;
tink_core__$Promise_TinkError.prototype = $extend(Error.prototype,{
	__class__: tink_core__$Promise_TinkError
});
var tink_core_Ref = {};
tink_core_Ref._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			tink_core_Callback.invoke(cb,f(result));
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			if(f(result)) {
				tink_core_Callback.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				tink_core_Callback.invoke(cb,v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.listen(cb),other.listen(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.listen(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.listen($yield);
		if(this2 == null) {
			return tink_core_CallbackLink.noop;
		} else {
			return $bind(this2,this2.cancel);
		}
	});
	end.handle(tink_core_Callback.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core_Signal.gather = function(this1) {
	var ret = tink_core_Signal.trigger();
	this1.listen(function(x) {
		ret.handlers.invoke(x);
	});
	return ret;
};
tink_core_Signal.generate = function(generator) {
	var ret = tink_core_Signal.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core_Callback.invoke(cb,a);
		};
		add(f);
		var _g = remove;
		var a1 = f;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
	var ret = this1;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	listen: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,listen: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _this = this.trigger.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_domspec_ClassName = {};
tink_domspec_ClassName._new = function(s) {
	var this1 = s;
	return this1;
};
tink_domspec_ClassName.add = function(this1,that) {
	var this2;
	var _g = that;
	if(this1 == null) {
		var v = _g;
		this2 = v;
	} else if(_g == null) {
		var v = this1;
		this2 = v;
	} else {
		var a = this1;
		var b = _g;
		this2 = "" + a + " " + b;
	}
	return this2;
};
tink_domspec_ClassName.when = function(this1,cond) {
	var this2 = cond ? this1 : "";
	return this2;
};
tink_domspec_ClassName.ofMap = function(parts) {
	var _g = [];
	var c = haxe_ds_StringMap.keysIterator(parts.h);
	while(c.hasNext()) {
		var c1 = c.next();
		if(parts.h[c1]) {
			_g.push(tink_domspec_ClassName.ofString(c1));
		}
	}
	var this1 = tink_domspec_ClassName.ofArray(_g);
	return this1;
};
tink_domspec_ClassName.ofArray = function(parts) {
	var f = tink_domspec_ClassName.ofString;
	var result = new Array(parts.length);
	var _g = 0;
	var _g1 = parts.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(parts[i]);
	}
	var this1 = result.join(" ");
	return this1;
};
tink_domspec_ClassName.ofString = function(s) {
	if(s == null) {
		return null;
	} else {
		var this1 = StringTools.trim(s);
		return this1;
	}
};
tink_domspec_ClassName.ofDynamicAccess = function(parts) {
	var _g = [];
	var _g1 = 0;
	var _g2 = Reflect.fields(parts);
	while(_g1 < _g2.length) {
		var c = _g2[_g1];
		++_g1;
		if(parts[c]) {
			_g.push(tink_domspec_ClassName.ofString(c));
		}
	}
	var this1 = tink_domspec_ClassName.ofArray(_g);
	return this1;
};
var tink_domspec_EventFrom = {};
tink_domspec_EventFrom.get_currentTarget = function(this1) {
	return this1.currentTarget;
};
tink_domspec_EventFrom.get_target = function(this1) {
	return this1.target;
};
tink_domspec_EventFrom.get_src = function(this1) {
	return this1.currentTarget;
};
var tink_domspec_CSSParser = function() { };
tink_domspec_CSSParser.__name__ = true;
tink_domspec_CSSParser.parseString = function(s) {
	tink_domspec_CSSParser.style.cssText = s;
	var ret = { };
	var ret1 = ret;
	var _g = 0;
	var _g1 = tink_domspec_CSSParser.style;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		ret1[name] = tink_domspec_CSSParser.style.getPropertyValue(name);
	}
	return ret;
};
var tink_macro_Bouncer = function() { };
tink_macro_Bouncer.__name__ = true;
tink_macro_Bouncer.makeOuter = function(a) {
	return null;
};
var tink_macro_DirectType = function() { };
tink_macro_DirectType.__name__ = true;
var tink_pure_FilterResult = {};
tink_pure_FilterResult.include = function(this1) {
	return this1 > 0;
};
tink_pure_FilterResult.stop = function(this1) {
	return (this1 & 3) == 3;
};
tink_pure_FilterResult.fromBool = function(b) {
	if(b) {
		return 1;
	} else {
		return 0;
	}
};
var tink_pure_NodeIterator = function(node) {
	this.list = [];
	if(node != null) {
		this.list.push(node);
	}
};
tink_pure_NodeIterator.__name__ = true;
tink_pure_NodeIterator.prototype = {
	hasNext: function() {
		return this.list.length > 0;
	}
	,next: function() {
		var _g = this.list.pop();
		if(_g == null) {
			return null;
		} else {
			var next = _g;
			var _g = -next.tails.length;
			var _g1 = 0;
			while(_g < _g1) {
				var i = _g++;
				this.list.push(next.tails[-i - 1]);
			}
			return next.value;
		}
	}
	,__class__: tink_pure_NodeIterator
};
var tink_pure__$List_ReplaceSelector = {};
tink_pure__$List_ReplaceSelector.const = function(v) {
	return function(i) {
		return i == v;
	};
};
var tink_pure__$List_ReplaceGenerator = {};
tink_pure__$List_ReplaceGenerator.const = function(v) {
	return function(_) {
		return v;
	};
};
var tink_state_Measurement = {};
tink_state_Measurement.get_value = function(this1) {
	return this1.a;
};
tink_state_Measurement.get_becameInvalid = function(this1) {
	return this1.b;
};
tink_state_Measurement._new = function(value,becameInvalid) {
	var this1 = new tink_core_MPair(value,becameInvalid);
	var this2 = this1;
	return this2;
};
var tink_state_Schedulable = function() { };
tink_state_Schedulable.__name__ = true;
tink_state_Schedulable.prototype = {
	__class__: tink_state_Schedulable
};
var tink_state__$Observable_JustOnce = function() {
};
tink_state__$Observable_JustOnce.__name__ = true;
tink_state__$Observable_JustOnce.__interfaces__ = [tink_state_Schedulable];
tink_state__$Observable_JustOnce.call = function(f) {
	var ret;
	var _g = tink_state__$Observable_JustOnce.pool.pop();
	if(_g == null) {
		ret = new tink_state__$Observable_JustOnce();
	} else {
		var v = _g;
		ret = v;
	}
	ret.f = f;
	return ret;
};
tink_state__$Observable_JustOnce.prototype = {
	run: function() {
		var f = this.f;
		this.f = null;
		tink_state__$Observable_JustOnce.pool.push(this);
		f();
	}
	,__class__: tink_state__$Observable_JustOnce
};
var tink_state_Comparator = {};
tink_state_Comparator.eq = function(this1,a,b) {
	if(this1 == null) {
		return a == b;
	} else {
		var f = this1;
		return f(a,b);
	}
};
tink_state_Comparator.unpack = function(this1) {
	return this1;
};
tink_state_Comparator.and = function(this1,that) {
	var _g = that;
	if(this1 == null) {
		var v = _g;
		return v;
	} else if(_g == null) {
		var v = this1;
		return v;
	} else {
		var c1 = this1;
		var c2 = _g;
		return function(a,b) {
			if(c1(a,b)) {
				return c2(a,b);
			} else {
				return false;
			}
		};
	}
};
tink_state_Comparator.or = function(this1,that) {
	var _g = that;
	if(this1 == null) {
		var v = _g;
		return v;
	} else if(_g == null) {
		var v = this1;
		return v;
	} else {
		var c1 = this1;
		var c2 = _g;
		return function(a,b) {
			if(!c1(a,b)) {
				return c2(a,b);
			} else {
				return true;
			}
		};
	}
};
var tink_state__$Observable_SimpleObservable = function(poll,comparator) {
	this._cache = null;
	tink_state_Invalidator.call(this);
	this._poll = poll;
	this.comparator = comparator;
};
tink_state__$Observable_SimpleObservable.__name__ = true;
tink_state__$Observable_SimpleObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state__$Observable_SimpleObservable.__super__ = tink_state_Invalidator;
tink_state__$Observable_SimpleObservable.prototype = $extend(tink_state_Invalidator.prototype,{
	isValid: function() {
		return this._cache != null;
	}
	,getComparator: function() {
		return this.comparator;
	}
	,reset: function(_) {
		this._cache = null;
		this.fire();
	}
	,poll: function() {
		var count = 0;
		while(this._cache == null) if(++count == 100) {
			throw haxe_Exception.thrown("polling did not conclude after 100 iterations");
		} else {
			this._cache = this._poll();
			this._cache.b.handle($bind(this,this.reset));
		}
		return this._cache;
	}
	,getValue: function() {
		return this.poll().a;
	}
	,__class__: tink_state__$Observable_SimpleObservable
});
var tink_state__$Observable_Binding = function(data,cb,scheduler,comparator) {
	this.last = null;
	this.status = 0;
	this.data = data;
	this.cb = cb;
	var tmp;
	if(scheduler == null) {
		tmp = tink_state__$Observable_DirectScheduler.inst;
	} else {
		var v = scheduler;
		tmp = v;
	}
	this.scheduler = tmp;
	var this1 = data.getComparator();
	var tmp;
	var _g = comparator;
	if(this1 == null) {
		var v = _g;
		tmp = v;
	} else if(_g == null) {
		var v = this1;
		tmp = v;
	} else {
		var c1 = this1;
		var c2 = _g;
		tmp = function(a,b) {
			if(!c1(a,b)) {
				return c2(a,b);
			} else {
				return true;
			}
		};
	}
	this.comparator = tmp;
	this.scheduler.schedule(this);
};
tink_state__$Observable_Binding.__name__ = true;
tink_state__$Observable_Binding.__interfaces__ = [tink_state_Schedulable,tink_state_Invalidatable];
tink_state__$Observable_Binding.prototype = {
	cancel: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		this.status = 3;
	}
	,invalidate: function() {
		if(this.status == 1) {
			this.status = 2;
			this.scheduler.schedule(this);
		}
	}
	,run: function() {
		switch(this.status) {
		case 0:
			this.data.onInvalidate(this);
			this.status = 1;
			tink_core_Callback.invoke(this.cb,this.last = this.data.getValue());
			break;
		case 1:case 3:
			break;
		case 2:
			this.status = 1;
			var prev = this.last;
			var next = this.last = this.data.getValue();
			var this1 = this.comparator;
			var tmp;
			if(this1 == null) {
				tmp = prev == next;
			} else {
				var f = this1;
				tmp = f(prev,next);
			}
			if(!tmp) {
				tink_core_Callback.invoke(this.cb,next);
			}
			break;
		}
	}
	,__class__: tink_state__$Observable_Binding
};
var tink_state__$Observable_DirectScheduler = function() {
};
tink_state__$Observable_DirectScheduler.__name__ = true;
tink_state__$Observable_DirectScheduler.__interfaces__ = [tink_state_Scheduler];
tink_state__$Observable_DirectScheduler.prototype = {
	progress: function(_) {
		return false;
	}
	,schedule: function(s) {
		var wasUpdating = tink_state_Observable.isUpdating;
		tink_state_Observable.isUpdating = true;
		tink_core_TypedError.tryFinally($bind(s,s.run),function() {
			tink_state_Observable.isUpdating = wasUpdating;
		});
	}
	,__class__: tink_state__$Observable_DirectScheduler
};
var tink_state__$Observable_Computation = {};
tink_state__$Observable_Computation._new = function(f) {
	var this1 = f;
	return this1;
};
tink_state__$Observable_Computation.asyncWithLast = function(f) {
	var link = null;
	var last = haxe_ds_Option.None;
	var ret = tink_state_Promised.Loading;
	var this1 = function(update,_) {
		ret = tink_state_Promised.Loading;
		if(link != null) {
			link.cancel();
		}
		link = f(last).handle(function(o) {
			var update1 = update;
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				last = haxe_ds_Option.Some(v);
				ret = tink_state_Promised.Done(v);
				break;
			case 1:
				var e = o.failure;
				ret = tink_state_Promised.Failed(e);
				break;
			}
			update1(ret);
		});
		return ret;
	};
	return this1;
};
tink_state__$Observable_Computation.async = function(f) {
	return tink_state__$Observable_Computation.asyncWithLast(function(_) {
		return f();
	});
};
tink_state__$Observable_Computation.withLast = function(f) {
	var last = haxe_ds_Option.None;
	var this1 = function(_,_1) {
		var ret = f(last);
		last = haxe_ds_Option.Some(ret);
		return ret;
	};
	return this1;
};
tink_state__$Observable_Computation.sync = function(f) {
	var this1 = function(_,_1) {
		return f();
	};
	return this1;
};
var tink_state__$Observable_Subscription = function() { };
tink_state__$Observable_Subscription.__name__ = true;
tink_state__$Observable_Subscription.prototype = {
	__class__: tink_state__$Observable_Subscription
};
var tink_state__$Observable_SubscriptionTo = function(source,cur,target) {
	this.source = source;
	this.last = cur;
	this.link = source.onInvalidate(target);
};
tink_state__$Observable_SubscriptionTo.__name__ = true;
tink_state__$Observable_SubscriptionTo.__interfaces__ = [tink_state__$Observable_Subscription];
tink_state__$Observable_SubscriptionTo.prototype = {
	hasChanged: function() {
		var before = this.last;
		var before1 = tink_state__$Observable_AutoObservable.cur;
		tink_state__$Observable_AutoObservable.cur = null;
		var ret = this.source.getValue();
		tink_state__$Observable_AutoObservable.cur = before1;
		this.last = ret;
		var this1 = this.source.getComparator();
		var a = this.last;
		var tmp;
		if(this1 == null) {
			tmp = a == before;
		} else {
			var f = this1;
			tmp = f(a,before);
		}
		return !tmp;
	}
	,unregister: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,__class__: tink_state__$Observable_SubscriptionTo
};
var tink_state_ObservableTools = function() { };
tink_state_ObservableTools.__name__ = true;
tink_state_ObservableTools.deliver = function(o,initial) {
	return tink_state_Observable.map(o,tink_state_Transform.plain(function(p) {
		if(p._hx_index == 1) {
			var v = p.result;
			initial = v;
			return initial;
		} else {
			return initial;
		}
	}));
};
tink_state_ObservableTools.flatten = function(o) {
	return tink_state_Observable.auto(tink_state__$Observable_Computation.sync(function() {
		return tink_state_Observable.get_value(tink_state_Observable.get_value(o));
	}));
};
var tink_state_Promised = $hxEnums["tink.state.Promised"] = { __ename__ : true, __constructs__ : ["Loading","Done","Failed"]
	,Loading: {_hx_index:0,__enum__:"tink.state.Promised",toString:$estr}
	,Done: ($_=function(result) { return {_hx_index:1,result:result,__enum__:"tink.state.Promised",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.state.Promised",toString:$estr}; },$_.__params__ = ["error"],$_)
};
var tink_state_PromisedTools = function() { };
tink_state_PromisedTools.__name__ = true;
tink_state_PromisedTools.next = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_core_Promise.ofSpecific(tink_core_Promise.NEVER);
	case 1:
		var a1 = a.result;
		return f(a1);
	case 2:
		var e = a.error;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_state_PromisedTools.map = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_state_Promised.Loading;
	case 1:
		var a1 = a.result;
		return tink_state_Promised.Done(f(a1));
	case 2:
		var e = a.error;
		return tink_state_Promised.Failed(e);
	}
};
tink_state_PromisedTools.flatMap = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_state_Promised.Loading;
	case 1:
		var a1 = a.result;
		return f(a1);
	case 2:
		var e = a.error;
		return tink_state_Promised.Failed(e);
	}
};
tink_state_PromisedTools.toOption = function(p) {
	if(p._hx_index == 1) {
		var data = p.result;
		return haxe_ds_Option.Some(data);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_state_PromisedTools.or = function(p,l) {
	if(p._hx_index == 1) {
		var v = p.result;
		return v;
	} else {
		return l.get();
	}
};
tink_state_PromisedTools.orNull = function(p) {
	if(p._hx_index == 1) {
		var v = p.result;
		return v;
	} else {
		return null;
	}
};
tink_state_PromisedTools.all = function(p) {
	var ret = [];
	var p1 = $getIterator(p);
	while(p1.hasNext()) {
		var p = p1.next();
		switch(p._hx_index) {
		case 0:
			return tink_state_Promised.Loading;
		case 1:
			var v = p.result;
			ret.push(v);
			break;
		case 2:
			var e = p.error;
			return tink_state_Promised.Failed(e);
		}
	}
	return tink_state_Promised.Done(ret);
};
var tink_state__$State_CompoundState = function(data,set,comparator) {
	this.data = data;
	this.update = set;
	this.comparator = comparator;
};
tink_state__$State_CompoundState.__name__ = true;
tink_state__$State_CompoundState.__interfaces__ = [tink_state__$State_StateObject];
tink_state__$State_CompoundState.prototype = {
	isValid: function() {
		return this.data.isValid();
	}
	,getValue: function() {
		return this.data.getValue();
	}
	,onInvalidate: function(i) {
		return this.data.onInvalidate(i);
	}
	,set: function(value) {
		this.update(value);
		return value;
	}
	,getComparator: function() {
		return this.comparator;
	}
	,__class__: tink_state__$State_CompoundState
};
var tink_url_Auth = {};
tink_url_Auth._new = function(user,password) {
	var this1 = "" + user + ":" + password;
	return this1;
};
tink_url_Auth.get_user = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[0];
	}
};
tink_url_Auth.get_password = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[1];
	}
};
tink_url_Auth.toString = function(this1) {
	return this1;
};
var tink_url_Portion = {};
tink_url_Portion.get_raw = function(this1) {
	return this1;
};
tink_url_Portion._new = function(v) {
	var this1 = v;
	return this1;
};
tink_url_Portion.stringly = function(this1) {
	return tink_url_Portion.toString(this1);
};
tink_url_Portion.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return decodeURIComponent(this1.split("+").join(" "));
	}
};
tink_url_Portion.ofString = function(s) {
	var this1 = s == null ? "" : encodeURIComponent(s);
	return this1;
};
var tink_url_PortionArray = {};
tink_url_PortionArray.toStringArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) {
		var p = this1[_g1];
		++_g1;
		_g.push(tink_url_Portion.toString(p));
	}
	return _g;
};
var tink_url_Query = {};
tink_url_Query.parse = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url_Query.iterator = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url_Query.toMap = function(this1) {
	var _g = new haxe_ds_StringMap();
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		_g.h[p1.name.toString()] = p1.value;
	}
	return _g;
};
tink_url_Query.ofObj = function(v) {
	var this1 = [];
	var ret = this1;
	var v1 = v;
	var _g = 0;
	var _g1 = Reflect.fields(v1);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		ret.push(tink_url_Portion.ofString(k) + "=" + tink_url_Portion.ofString(v1[k]));
	}
	return ret.join("&");
};
tink_url_Query.toString = function(this1) {
	return this1;
};
tink_url_Query.build = function() {
	var this1 = [];
	return this1;
};
tink_url_Query.parseString = function(s,sep,set,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(set == null) {
		set = "=";
	}
	if(sep == null) {
		sep = "&";
	}
	return new tink_url__$Query_QueryStringParser(s,sep,set,pos);
};
var tink_url_QueryStringBuilder = {};
tink_url_QueryStringBuilder._new = function() {
	var this1 = [];
	return this1;
};
tink_url_QueryStringBuilder.add = function(this1,name,value) {
	this1.push(name + "=" + value);
	return this1;
};
tink_url_QueryStringBuilder.toString = function(this1,sep) {
	if(sep == null) {
		sep = "&";
	}
	return this1.join(sep);
};
tink_url_QueryStringBuilder.copy = function(this1) {
	return this1.slice();
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
Object.defineProperty(coconut_react_ViewBase.prototype,"props",{ get : function() {
	return this.__props;
}, set : function(attr) {
	if(attr != null) {
		this.__props = attr;
		if(this.__initAttributes) {
			this.__initAttributes(attr);
		}
	}
}});
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
coconut_react_View.idCounter = 0;
tink_state_Observable.scheduler = (function($this) {
	var $r;
	var later = function(fn) {
		haxe_Timer.delay(fn,10);
	};
	var later1;
	try {
		if(window.requestAnimationFrame != null) {
			later1 = function(fn) {
				window.requestAnimationFrame(fn);
			};
		} else {
			throw haxe_Exception.thrown("nope");
		}
	} catch( _g ) {
		later1 = later;
	}
	var asap = function(fn) {
		later1(fn);
	};
	var asap1;
	try {
		var p = Promise.resolve(42);
		asap1 = function(fn) {
			p.then(fn);
		};
	} catch( _g ) {
		asap1 = asap;
	}
	$r = new tink_state__$Observable_BatchScheduler(function(b,isRerun) {
		var _g = $bind(b,b.progress);
		var maxSeconds = .01;
		(isRerun ? later1 : asap1)(function() {
			return _g(maxSeconds);
		});
	});
	return $r;
}(this));
tink_state_Observable.isUpdating = false;
coconut_ui_internal_ImplicitContext.ORPHAN = new tink_core__$Lazy_LazyConst(null);
coconut_ui_internal_ImplicitContext.NONE = tink_state_Observable.const(coconut_ui_internal_ImplicitValues._new([]));
coconut_react_Implicit.contextType = React.createContext(new coconut_ui_internal_ImplicitContext());
HomeView.contextType = coconut_react_Implicit.contextType;
SettingsView.contextType = coconut_react_Implicit.contextType;
tink_Url.SCHEME = 2;
tink_Url.PAYLOAD = 3;
tink_Url.AUTH = 6;
tink_Url.HOSTNAMES = 7;
tink_Url.PATH = 8;
tink_Url.QUERY = 10;
tink_Url.HASH = 12;
tink_url_Path.root = (function($this) {
	var $r;
	var this1 = "/";
	$r = this1;
	return $r;
}(this));
tink_pure__$List_Node.EMPTY = [];
spectatory_Location.href = (function($this) {
	var $r;
	var this1 = new tink_state__$State_SimpleState(tink_Url.fromString(window.location.href),null,null);
	var s = this1;
	
			(function () {

				if ( typeof window.CustomEvent === "function" ) return;

				function CustomEvent ( event, params ) {
					params = params || { bubbles: false, cancelable: false, detail: undefined };
					var evt = document.createEvent( "CustomEvent" );
					evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
					return evt;
				}

				CustomEvent.prototype = window.Event.prototype;

				window.CustomEvent = CustomEvent;
			})();
		;
	var update = function() {
		var href = window.location.href;
		if(tink_Url.fromString(href) != tink_state_State.get_value(s)) {
			s.set(tink_Url.fromString(href));
		}
	};
	var oldPushState = ($_=window.history,$bind($_,$_.pushState));
	window.history.pushState = function(data,title,url) {
		oldPushState(data,title,url);
		update();
	};
	var oldReplaceState = ($_=window.history,$bind($_,$_.replaceState));
	window.history.replaceState = function(data,title,url) {
		oldReplaceState(data,title,url);
		update();
	};
	window.addEventListener("popstate",update);
	$r = s;
	return $r;
}(this));
spectatory_Location.query = tink_state_Observable.map(spectatory_Location.href,tink_state_Transform.plain(function(href) {
	var init = null;
	var this1;
	if(init == null) {
		this1 = null;
	} else {
		var ret = tink_pure_List._new();
		if(haxe_ds_StringMap.valueIterator(init.h).hasNext()) {
			var a = [init];
			var _g = new haxe_ds_StringMap();
			var _g1 = 0;
			while(_g1 < a.length) {
				var m = a[_g1];
				++_g1;
				var k = haxe_ds_StringMap.keysIterator(m.h);
				while(k.hasNext()) {
					var k1 = k.next();
					_g.h[k1] = m.h[k1];
				}
			}
			this1 = tink_pure_List.prepend(ret,{ key : null, isset : false, value : null, condensed : _g});
		} else {
			this1 = ret;
		}
	}
	var map = this1;
	var param = new tink_url__$Query_QueryStringParser(href.query,"&","=",0);
	while(param.hasNext()) {
		var param1 = param.next();
		map = tink_pure_Mapping.with(map,param1.name,param1.value);
	}
	return map;
}));
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Future.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Lazy.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core_Progress.INIT = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_core_Promise.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core_Promise.NEVER = (function($this) {
	var $r;
	var ret = tink_core_Future.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_domspec_CSSParser.style = window.document.createElement("div").style;
tink_pure_FilterResult.ExcludeAndStop = -3;
tink_pure_FilterResult.Exclude = 0;
tink_pure_FilterResult.Include = 1;
tink_pure_FilterResult.IncludeAndStop = 3;
tink_state__$Observable_JustOnce.pool = [];
tink_state__$Observable_DirectScheduler.inst = new tink_state__$Observable_DirectScheduler();
Demo.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
